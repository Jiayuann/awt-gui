package com.knightsight.pattern;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;

public class FastCollinearPoints {
	   ArrayList<LineSegment> list=new ArrayList<LineSegment>();
	
	   public FastCollinearPoints(Point[] points){  
		  checkPoint(points);
		  Point[] copyPoints=Arrays.copyOf(points, points.length);
		 
		  for(int i=0;i<copyPoints.length;i++){
			  Comparator<Point> slopeOrder=copyPoints[i].slopeOrder();
			  Arrays.sort(copyPoints,slopeOrder);
			  int j=2;
			  while(j<points.length){
				  int start =j-1;
				  while(j<copyPoints.length&&
						  slopeOrder.compare(copyPoints[j-1], copyPoints[j])==0){
					  j++;
				  }
				  if(j-start>=3&&copyPoints[0].compareTo(copyPoints[start])<0){
					  list.add(new LineSegment(copyPoints[0], copyPoints[j-1]));
				  }
				  j++; 
			  }  
			  Arrays.sort(copyPoints);
		  }
		  
		   // finds all line segments containing 4 or more points
	   }
	   
	   public int numberOfSegments(){
		   return list.size();
		   // the number of line segments
	   }
	   
	   public LineSegment[] segments(){
		  return list.toArray(new LineSegment[list.size()]);
		   // the line segments
	   }
	   
	   public void checkPoint(Point[] points){
		   for(int i=0;i<points.length;i++){
			   if(points[i]==null)
				   throw new NullPointerException();
			   for(int j=i+1;j<points.length;j++){
				   if(points[i].compareTo(points[j])==0)
					   throw new IllegalArgumentException("Contains Duplicate");
			   }
		   }
	   }
	   
	   public static void main(String[] args) {

		    // read the n points from a file
		    In in = new In(args[0]);
		    int n = in.readInt();
		    Point[] points = new Point[n];
		    for (int i = 0; i < n; i++) {
		        int x = in.readInt();
		        int y = in.readInt();
		        points[i] = new Point(x, y);
		    }

		    // draw the points
		    StdDraw.enableDoubleBuffering();
		    StdDraw.setXscale(0, 32768);
		    StdDraw.setYscale(0, 32768);
		    for (Point p : points) {
		        p.draw();
		    }
		    StdDraw.show();

		    // print and draw the line segments
		    FastCollinearPoints collinear = new FastCollinearPoints(points);
		    for (LineSegment segment : collinear.segments()) {
		        StdOut.println(segment);
		        segment.draw();
		    }
		    StdDraw.show();
		}
}