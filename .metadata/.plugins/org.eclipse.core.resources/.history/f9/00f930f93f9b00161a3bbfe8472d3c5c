package com.knightsight.pattern;
import java.util.ArrayList;
import java.util.Arrays;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;

public class FastCollinearPoints {
	   ArrayList<LineSegment> list=new ArrayList<LineSegment>();
	   public FastCollinearPoints(Point[] points){
		  checkPoint(points);
		  for(int i=0;i<points.length-3;i++){
			   Arrays.sort(points,points[i].slopeOrder());
			  for(int j=i+1;i<points.length-2;j++)
				  if(points[i].slopeTo(points[j])==points[i].slopeTo(points[j+1])&&
				  points[i].slopeTo(points[j])==points[i].slopeTo(points[j+2]))
					  list.add(new LineSegment(points[i], points[j+2]));
		  }
		   // finds all line segments containing 4 or more points
	   }
	   
	   public int numberOfSegments(){
		   return list.size();
		   // the number of line segments
	   }
	   
	   public LineSegment[] segments(){
		  return list.toArray(new LineSegment[list.size()]);
		   // the line segments
	   }
	   
	   public void checkPoint(Point[] points){
		   for(int i=0;i<points.length;i++){
			   if(points[i]==null)
				   throw new NullPointerException();
			   for(int j=i+1;j<points.length;j++){
				   if(points[i].compareTo(points[j])==0)
					   throw new IllegalArgumentException("Contains Duplicate");
			   }
		   }
	   }
	   
	   public static void main(String[] args) {

		    // read the n points from a file
		    In in = new In(args[0]);
		    int n = in.readInt();
		    Point[] points = new Point[n];
		    for (int i = 0; i < n; i++) {
		        int x = in.readInt();
		        int y = in.readInt();
		        points[i] = new Point(x, y);
		    }

		    // draw the points
		    StdDraw.enableDoubleBuffering();
		    StdDraw.setXscale(0, 32768);
		    StdDraw.setYscale(0, 32768);
		    for (Point p : points) {
		        p.draw();
		    }
		    StdDraw.show();

		    // print and draw the line segments
		    BruteCollinearPoints collinear = new BruteCollinearPoints(points);
		    for (LineSegment segment : collinear.segments()) {
		        StdOut.println(segment);
		        segment.draw();
		    }
		    StdDraw.show();
		}
}